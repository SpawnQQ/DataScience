if('forecast' %in% rownames(installed.packages()) == FALSE) {install.packages('forecast')}
if('prophet' %in% rownames(installed.packages()) == FALSE) {install.packages('prophet')}
if('dplyr' %in% rownames(installed.packages()) == FALSE) {install.packages('dplyr')}
if('RODBC' %in% rownames(installed.packages()) == FALSE) {install.packages('RODBC')}
if('odbc' %in% rownames(installed.packages()) == FALSE) {install.packages('odbc')}
if('DBI' %in% rownames(installed.packages()) == FALSE) {install.packages('DBI')}
library(forecast)
library(RODBC)
library(prophet)
library(dplyr)
library(forecast)
library(RODBC)
library(prophet)
library(dplyr)
if('forecast' %in% rownames(installed.packages()) == FALSE) {install.packages('forecast')}
if('prophet' %in% rownames(installed.packages()) == FALSE) {install.packages('prophet')}
if('dplyr' %in% rownames(installed.packages()) == FALSE) {install.packages('dplyr')}
if('RODBC' %in% rownames(installed.packages()) == FALSE) {install.packages('RODBC')}
if('odbc' %in% rownames(installed.packages()) == FALSE) {install.packages('odbc')}
if('DBI' %in% rownames(installed.packages()) == FALSE) {install.packages('DBI')}
library(forecast)
library(RODBC)
library(prophet)
library(dplyr)
library(forecast)
library(RODBC)
library(prophet)
library(dplyr)
library(forecast)
library(RODBC)
library(prophet)
library(dplyr)
# Version de R 3.4.4
if('forecast' %in% rownames(installed.packages()) == FALSE) {install.packages('forecast')}
if('prophet' %in% rownames(installed.packages()) == FALSE) {install.packages('prophet')}
if('dplyr' %in% rownames(installed.packages()) == FALSE) {install.packages('dplyr')}
if('RODBC' %in% rownames(installed.packages()) == FALSE) {install.packages('RODBC')}
library(forecast)
library(RODBC)
library(prophet)
library(dplyr)
#######################################################################################
#                              Preparamos los datos                                   #
#######################################################################################
timeseries <- read.csv('Consumo Gas Region Magallanes.csv',sep=';')
paste(timeseries$A単o,timeseries$Mes,timeseries$Dia, collapse="-")
timeseries$periodo <- apply( timeseries[ , c( 'A単o' , 'Mes' , 'Dia' ) ] , 1 , paste , collapse = "-" )
timeseries$periodo <- as.Date(timeseries$periodo, "%Y-%m-%d")
# timeseries <- timeseries[timeseries$periodo >= '1996-01-01',]
#######################################################################################
#                              Datos por periodo semanal                              #
#######################################################################################
consumo_semanal <- read.csv('consumo_semanal.csv',sep=';')
consumo_semanal$periodo <- as.Date(consumo_semanal$periodo, "%Y-%m-%d")
#######################################################################################
#                           Datos por periodo mensual                                 #
#######################################################################################
consumo_mensual <- read.csv('consumo_mensual.csv',sep=';')
consumo_mensual$periodo <- as.Date(consumo_mensual$periodo, "%Y-%m-%d")
#######################################################################################
#                             Contemplamos los feriados                               #
#######################################################################################
feriados <- data_frame(
holiday = 'feriado',
ds = timeseries[timeseries$Feriado == 1,]$periodo,
lower_window = 0,
upper_window = 1)
holidays <- bind_rows(feriados)
setwd("~/Proyectos/Brain Food")
#######################################################################################
#                              Preparamos los datos                                   #
#######################################################################################
timeseries <- read.csv('Consumo Gas Region Magallanes.csv',sep=';')
paste(timeseries$A単o,timeseries$Mes,timeseries$Dia, collapse="-")
timeseries$periodo <- apply( timeseries[ , c( 'A単o' , 'Mes' , 'Dia' ) ] , 1 , paste , collapse = "-" )
timeseries$periodo <- as.Date(timeseries$periodo, "%Y-%m-%d")
# timeseries <- timeseries[timeseries$periodo >= '1996-01-01',]
#######################################################################################
#                              Datos por periodo semanal                              #
#######################################################################################
consumo_semanal <- read.csv('consumo_semanal.csv',sep=';')
consumo_semanal$periodo <- as.Date(consumo_semanal$periodo, "%Y-%m-%d")
#######################################################################################
#                           Datos por periodo mensual                                 #
#######################################################################################
consumo_mensual <- read.csv('consumo_mensual.csv',sep=';')
consumo_mensual$periodo <- as.Date(consumo_mensual$periodo, "%Y-%m-%d")
#######################################################################################
#                             Contemplamos los feriados                               #
#######################################################################################
feriados <- data_frame(
holiday = 'feriado',
ds = timeseries[timeseries$Feriado == 1,]$periodo,
lower_window = 0,
upper_window = 1)
holidays <- bind_rows(feriados)
model <- prophet(data.frame(ds=timeseries$periodo, y=timeseries$Consumo), holidays = holidays,n.changepoints = 21)
futuro_days <- make_future_dataframe(model, periods = 7,freq = "days",include_history = FALSE)
forecast_days <- predict(model, futuro_days)
forecast_days <- forecast_days[,c('ds','yhat')]
colnames(forecast_days) <- c('periodo', 'prediccion_consumo')
forecast_days$prediccion_consumo <- as.integer(forecast_days$prediccion_consumo)
forecast_days$periodo <- as.character.Date(forecast_days$periodo)
df.cv <- cross_validation(model, initial = 1170, period = 180, horizon = 365, units = 'days')
head(df.cv)
df.p <- performance_metrics(df.cv)
head(df.p)
